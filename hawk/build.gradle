apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

android {
  compileSdk rootProject.ext.compileSdkVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    consumerProguardFiles 'proguard-rules.pro'
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  lintOptions {
    textReport true
    textOutput 'stdout'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

  namespace 'com.orhanobut.hawk'
}

dependencies {
  api 'com.facebook.conceal:conceal:1.1.3@aar'
  implementation 'com.google.code.gson:gson:2.11.0'

  testImplementation 'junit:junit:4.13.2'
  testImplementation 'com.google.truth:truth:1.4.3'
  testImplementation 'org.robolectric:robolectric:4.13'
  testImplementation 'org.mockito:mockito-core:5.12.0'
  testImplementation deps.kotlin

  androidTestImplementation 'junit:junit:4.13.2'
  androidTestImplementation 'com.google.truth:truth:1.4.3'
  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test:rules:1.0.2'
  androidTestImplementation deps.kotlin

}

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("../github.properties"))) //Set env variable GPR_USER & GPR_API_KEY if not adding a properties file

def getVersionName = { ->
  return "2.2.3" // Replace with version Name
}

def getArtificatId = { ->
  return "hawk" // Replace with library name ID
}

publishing {
  publications {
    bar(MavenPublication) {
      groupId 'com.orhanobut' // Replace with group ID
      artifactId getArtificatId()
      version getVersionName()
      artifact("$buildDir/outputs/aar/${getArtificatId()}-release.aar")
    }
    // Create different publications for every build types (debug and release)
    android.buildTypes.all { variant ->
      // Dynamically creating publications name
      "${variant.name}Aar"(MavenPublication) {

        def manifest = new XmlSlurper().parse(project.android.sourceSets.main.manifest.srcFile);
        def libVersion = manifest['@android:versionName'].text()
        def artifactName = project.getName()

        // Artifact properties
        groupId "com.orhanobut"
        version = libVersion
        artifactId variant.name == 'debug' ? artifactName + '-dev' : artifactName
        version getVersionName()

        // Tell maven to prepare the generated "*.aar" file for publishing
        artifact("$buildDir/outputs/aar/${project.getName()}-${variant.name}.aar")

        pom.withXml {
          //Creating additional node for dependencies
          def dependenciesNode = asNode().appendNode('dependencies')

          configurations.implementation.allDependencies.each {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)
          }
        }
      }
    }
  }

  repositories {
    maven {
      name = "GitHubPackages"
      /** Configure path of your package repository on Github
       ** Replace GITHUB_USERID with your/organisation Github userID
       ** and REPOSITORY with the repository name on GitHub
       */
      url = uri("https://maven.pkg.github.com/Mobiel-Bekeken/hawk")
      credentials {
        /** Create github.properties in root project folder file with
         ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
         ** Set env variable GPR_USER & GPR_API_KEY if not adding a properties file**/

        username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
        password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
      }
    }
  }
}